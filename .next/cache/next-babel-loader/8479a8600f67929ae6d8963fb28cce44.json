{"ast":null,"code":"var _jsxFileName = \"/Users/sandeeptc/git/react/Next-practice/context/TaskListContext.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useEffect } from 'react';\nimport { v1 as uuid } from \"uuid\";\nexport const TaskListContext = createContext();\n\nconst TaskListContextProvider = props => {\n  if (localStorage) {\n    const initialState = localStorage.getItem('tasks') || [];\n  } // { title: 'Read the book', id: 1 },\n  // { title: 'Wash the Car', id: 2 },\n  // { title: 'Build a React App', id: 3 },\n\n\n  const {\n    0: tasks,\n    1: setTasks\n  } = useState(initialState);\n  const {\n    0: editItem,\n    1: setEditItem\n  } = useState(null);\n  useEffect(() => {\n    console.log('useEffect!');\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  const addTask = title => {\n    setTasks([...tasks, {\n      title,\n      id: Math.floor(Math.random() * 100)\n    }]);\n  };\n\n  const removeTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const clearList = () => {\n    setTasks([]);\n  };\n\n  const findItem = id => {\n    const item = tasks.find(task => task.id === id);\n    setEditItem(item);\n  };\n\n  const editTask = (title, id) => {\n    const newTasks = tasks.map(task => task.id === id ? {\n      title,\n      id\n    } : task);\n    setTasks(newTasks);\n    setEditItem(null);\n  };\n\n  return __jsx(TaskListContext.Provider, {\n    value: {\n      tasks,\n      addTask,\n      removeTask,\n      clearList,\n      findItem,\n      editTask,\n      editItem\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default TaskListContextProvider;","map":{"version":3,"sources":["/Users/sandeeptc/git/react/Next-practice/context/TaskListContext.js"],"names":["React","createContext","useState","useEffect","v1","uuid","TaskListContext","TaskListContextProvider","props","localStorage","initialState","getItem","tasks","setTasks","editItem","setEditItem","console","log","setItem","JSON","stringify","addTask","title","id","Math","floor","random","removeTask","filter","task","clearList","findItem","item","find","editTask","newTasks","map","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,OAAO,MAAMC,eAAe,GAAGL,aAAa,EAArC;;AACP,MAAMM,uBAAuB,GAAIC,KAAD,IAAW;AACvC,MAAIC,YAAJ,EAAkB;AACd,UAAMC,YAAY,GAAGD,YAAY,CAACE,OAAb,CAAqB,OAArB,KAAiC,EAAtD;AACH,GAHsC,CAIvC;AACA;AACA;;;AAEA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBX,QAAQ,CAACQ,YAAD,CAAlC;AACA,QAAM;AAAA,OAACI,QAAD;AAAA,OAAWC;AAAX,MAA0Bb,QAAQ,CAAC,IAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEAR,IAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeR,KAAf,CAA9B;AACH,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT;;AAMA,QAAMS,OAAO,GAAIC,KAAD,IAAW;AACvBT,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW;AAAEU,MAAAA,KAAF;AAASC,MAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B;AAAb,KAAX,CAAD,CAAR;AACH,GAFD;;AAGA,QAAMC,UAAU,GAAIJ,EAAD,IAAQ;AACvBV,IAAAA,QAAQ,CAACD,KAAK,CAACgB,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACN,EAAL,KAAYA,EAAjC,CAAD,CAAR;AACH,GAFD;;AAGA,QAAMO,SAAS,GAAG,MAAM;AACpBjB,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,GAFD;;AAGA,QAAMkB,QAAQ,GAAIR,EAAD,IAAQ;AACrB,UAAMS,IAAI,GAAGpB,KAAK,CAACqB,IAAN,CAAWJ,IAAI,IAAIA,IAAI,CAACN,EAAL,KAAYA,EAA/B,CAAb;AACAR,IAAAA,WAAW,CAACiB,IAAD,CAAX;AACH,GAHD;;AAIA,QAAME,QAAQ,GAAG,CAACZ,KAAD,EAAQC,EAAR,KAAe;AAC5B,UAAMY,QAAQ,GAAGvB,KAAK,CAACwB,GAAN,CAAUP,IAAI,IAC1BA,IAAI,CAACN,EAAL,KAAYA,EAAb,GAAmB;AAAED,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAnB,GAAmCM,IADtB,CAAjB;AAGAhB,IAAAA,QAAQ,CAACsB,QAAD,CAAR;AACApB,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH,GAND;;AAQA,SACI,MAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAC7BH,MAAAA,KAD6B;AAE7BS,MAAAA,OAF6B;AAG7BM,MAAAA,UAH6B;AAI7BG,MAAAA,SAJ6B;AAK7BC,MAAAA,QAL6B;AAM7BG,MAAAA,QAN6B;AAO7BpB,MAAAA;AAP6B,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASKN,KAAK,CAAC6B,QATX,CADJ;AAaH,CAnDD;;AAqDA,eAAe9B,uBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { v1 as uuid } from \"uuid\";\n\nexport const TaskListContext = createContext();\nconst TaskListContextProvider = (props) => {\n    if (localStorage) {\n        const initialState = localStorage.getItem('tasks') || []\n    }\n    // { title: 'Read the book', id: 1 },\n    // { title: 'Wash the Car', id: 2 },\n    // { title: 'Build a React App', id: 3 },\n\n    const [tasks, setTasks] = useState(initialState)\n    const [editItem, setEditItem] = useState(null);\n\n    useEffect(() => {\n        console.log('useEffect!');\n\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n    }, [tasks])\n\n    const addTask = (title) => {\n        setTasks([...tasks, { title, id: Math.floor(Math.random() * 100) }])\n    }\n    const removeTask = (id) => {\n        setTasks(tasks.filter(task => task.id !== id))\n    }\n    const clearList = () => {\n        setTasks([])\n    }\n    const findItem = (id) => {\n        const item = tasks.find(task => task.id === id);\n        setEditItem(item);\n    }\n    const editTask = (title, id) => {\n        const newTasks = tasks.map(task =>\n            (task.id === id) ? { title, id } : task\n        );\n        setTasks(newTasks);\n        setEditItem(null);\n    }\n\n    return (\n        <TaskListContext.Provider value={{\n            tasks,\n            addTask,\n            removeTask,\n            clearList,\n            findItem,\n            editTask,\n            editItem\n        }}>\n            {props.children}\n        </TaskListContext.Provider>\n    )\n}\n\nexport default TaskListContextProvider;"]},"metadata":{},"sourceType":"module"}